"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from mix_python_sdk.types import BaseModel
from typing import Literal, Optional
from typing_extensions import NotRequired, TypedDict


Provider = Literal[
    "anthropic",
    "openai",
    "openrouter",
    "gemini",
    "brave",
]
r"""Provider name (anthropic, openai, openrouter, gemini, brave)"""


class StoreAPIKeyRequestTypedDict(TypedDict):
    api_key: str
    r"""API key for authentication"""
    provider: Provider
    r"""Provider name (anthropic, openai, openrouter, gemini, brave)"""


class StoreAPIKeyRequest(BaseModel):
    api_key: str
    r"""API key for authentication"""

    provider: Provider
    r"""Provider name (anthropic, openai, openrouter, gemini, brave)"""


class StoreAPIKeyResponseTypedDict(TypedDict):
    r"""API key stored status"""

    message: NotRequired[str]
    r"""Success message"""
    provider: NotRequired[str]
    r"""Provider name"""
    status: NotRequired[str]
    r"""Operation status (success)"""


class StoreAPIKeyResponse(BaseModel):
    r"""API key stored status"""

    message: Optional[str] = None
    r"""Success message"""

    provider: Optional[str] = None
    r"""Provider name"""

    status: Optional[str] = None
    r"""Operation status (success)"""
