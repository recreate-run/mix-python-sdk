"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .messagedata import MessageData, MessageDataTypedDict
from .resterror import RESTError, RESTErrorTypedDict
from mix_python_sdk.types import BaseModel
from mix_python_sdk.utils import FieldMetadata, QueryParamMetadata
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetMessageHistoryRequestTypedDict(TypedDict):
    limit: NotRequired[int]
    r"""Maximum number of messages to return"""
    offset: NotRequired[int]
    r"""Number of messages to skip"""


class GetMessageHistoryRequest(BaseModel):
    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 50
    r"""Maximum number of messages to return"""

    offset: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0
    r"""Number of messages to skip"""


class GetMessageHistoryResponseTypedDict(TypedDict):
    r"""Message history"""

    data: NotRequired[List[MessageDataTypedDict]]
    error: NotRequired[RESTErrorTypedDict]
    message: NotRequired[str]
    r"""Optional message"""


class GetMessageHistoryResponse(BaseModel):
    r"""Message history"""

    data: Optional[List[MessageData]] = None

    error: Optional[RESTError] = None

    message: Optional[str] = None
    r"""Optional message"""
